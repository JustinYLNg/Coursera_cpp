#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// define the node structure
typedef struct node {
    int data;
    struct node *next;
} node_t;

// function to insert a new node at the beginning of the list
void push(node_t **head_ref, int new_data) {
    node_t *new_node = (node_t*)malloc(sizeof(node_t));
    new_node->data = new_data;
    new_node->next = (*head_ref);
    (*head_ref) = new_node;
}

// function to swap two nodes
void swap(node_t *a, node_t *b) {
    int temp = a->data;
    a->data = b->data;
    b->data = temp;
}

// function to sort the linked list using bubble sort
void bubble_sort(node_t *head) {
    int swapped, i;
    node_t *ptr1;
    node_t *lptr = NULL;

    // check for empty list
    if (head == NULL) {
        return;
    }

    do {
        swapped = 0;
        ptr1 = head;

        while (ptr1->next != lptr) {
            if (ptr1->data > ptr1->next->data) {
                swap(ptr1, ptr1->next);
                swapped = 1;
            }
            ptr1 = ptr1->next;
        }
        lptr = ptr1;
    } while (swapped);
}

// function to print the linked list in rows of 5
void print_list(node_t *head) {
    node_t *current = head;
    int count = 0;

    while (current != NULL) {
        printf("%d ", current->data);
        count++;

        if (count % 5 == 0) {
            printf("\n");
        }
        current = current->next;
    }
}

int main() {
    srand(time(NULL));

    // create the head node
    node_t *head = NULL;

    // generate and insert 100 random integers into the linked list
    for (int i = 0; i < 100; i++) {
        push(&head, rand() % 1000);
    }

    // sort the linked list using bubble sort
    bubble_sort(head);

    // print the sorted list in rows of 5
    printf("Sorted list:\n");
    print_list(head);

    return 0;
}